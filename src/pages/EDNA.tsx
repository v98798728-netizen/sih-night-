import React, { useState } from 'react';
import { Upload, Download, FileText, Dna, BarChart3, CheckCircle } from 'lucide-react';

const EDNA = () => {
  const [dragOver, setDragOver] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [analysisComplete, setAnalysisComplete] = useState(false);
  const fileInputRef = React.useRef(null);

  const sampleResults = [
    { species: 'Gadus morhua', common: 'Atlantic Cod', reads: 4523, abundance: 'High', confidence: 96 },
    { species: 'Thunnus thynnus', common: 'Bluefin Tuna', reads: 2847, abundance: 'Medium', confidence: 94 },
    { species: 'Salmo salar', common: 'Atlantic Salmon', reads: 1923, abundance: 'Medium', confidence: 91 },
    { species: 'Scomber scombrus', common: 'Atlantic Mackerel', reads: 1204, abundance: 'Low', confidence: 88 },
    { species: 'Pleuronectes platessa', common: 'European Plaice', reads: 856, abundance: 'Low', confidence: 85 },
    { species: 'Hippoglossus hippoglossus', common: 'Atlantic Halibut', reads: 432, abundance: 'Very Low', confidence: 82 }
  ];

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = () => {
    setDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    const files = Array.from(e.dataTransfer.files);
    setUploadedFiles(prev => [...prev, ...files]);
  };

  const handleAnalyze = () => {
    setAnalysisComplete(true);
  };

  const handleBrowseFiles = () => {
    fileInputRef.current?.click();
  };

  const handleFileSelect = (e) => {
    const files = Array.from(e.target.files);
    setUploadedFiles(prev => [...prev, ...files]);
  };

  const handleDownloadCSV = () => {
    const csvContent = `Species,Common Name,Reads,Abundance,Confidence
${sampleResults.map(result => 
  `"${result.species}","${result.common}",${result.reads},"${result.abundance}",${result.confidence}`
).join('\n')}`;
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'edna-analysis-results.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadPDF = () => {
    const pdfContent = `eDNA Analysis Report

Analysis Summary:
- Total Species: 6
- Total Reads: ${sampleResults.reduce((sum, result) => sum + result.reads, 0).toLocaleString()}
- Average Confidence: 89%
- Shannon Index: 2.34

Species Detection Results:
${sampleResults.map(result => 
  `${result.species} (${result.common}): ${result.reads} reads, ${result.confidence}% confidence`
).join('\n')}

Generated by Shark Marine Platform`;
    
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'edna-analysis-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getAbundanceColor = (abundance) => {
    const colors = {
      'High': 'bg-green-100 text-green-800',
      'Medium': 'bg-yellow-100 text-yellow-800',
      'Low': 'bg-orange-100 text-orange-800',
      'Very Low': 'bg-red-100 text-red-800'
    };
    return colors[abundance] || 'bg-gray-100 text-gray-800';
  };

  const totalReads = sampleResults.reduce((sum, result) => sum + result.reads, 0);

  return (
    <div className="py-12 px-6 min-h-screen">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-semibold text-ocean-800 mb-4 animate-float">eDNA Analysis</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Upload eDNA samples for comprehensive species identification and biodiversity assessment
          </p>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Upload Section */}
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-ocean-800">Upload eDNA Data</h2>
            
            <div
              className={`glass rounded-2xl border-2 border-dashed p-6 text-center transition-all duration-300 glow-soft ${
                dragOver ? 'border-ocean-500 glass-ocean' : 'border-white/30 hover:border-ocean-500'
              }`}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
            >
              <Upload className="w-10 h-10 text-ocean-600 mx-auto mb-3 animate-pulse-soft" />
              <h3 className="text-lg font-medium text-ocean-800 mb-2">Drop eDNA files here</h3>
              <p className="text-gray-600 mb-3">FASTQ, FASTA, CSV formats</p>
              <button 
                onClick={handleBrowseFiles}
                className="glass-coral text-white px-4 py-2 rounded-md text-sm glow-coral transition-all duration-200 flex items-center space-x-2"
              >
                Browse Files
              </button>
              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept=".fastq,.fasta,.csv"
                onChange={handleFileSelect}
                className="hidden"
              />
            </div>

            {/* File List */}
            {uploadedFiles.length > 0 && (
              <div className="glass rounded-2xl p-4 glow-soft">
                <h3 className="text-lg font-semibold text-ocean-800 mb-3">Uploaded Files</h3>
                <div className="space-y-2">
                  {uploadedFiles.map((file, index) => (
                    <div key={index} className="flex items-center justify-between p-2 glass-dark rounded-lg">
                      <div className="flex items-center space-x-2">
                        <FileText className="w-4 h-4 text-ocean-600" />
                        <span className="text-sm font-medium">{file.name}</span>
                      </div>
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    </div>
                  ))}
                </div>
                <button 
                  onClick={handleAnalyze}
                  className="w-full mt-4 glass-ocean text-white py-2 rounded-lg glow-hover transition-all duration-200 flex items-center justify-center space-x-2"
                >
                  <Dna className="w-4 h-4" />
                  <span>Start Analysis</span>
                </button>
              </div>
            )}

            {/* Summary Stats */}
            {analysisComplete && (
              <div className="glass rounded-2xl p-4 glow-soft">
                <h3 className="text-lg font-semibold text-ocean-800 mb-3">Analysis Summary</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Species</span>
                    <span className="font-mono text-ocean-700 font-semibold">6</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Reads</span>
                    <span className="font-mono text-ocean-700 font-semibold">{totalReads.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Avg Confidence</span>
                    <span className="font-mono text-ocean-700 font-semibold">89%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Shannon Index</span>
                    <span className="font-mono text-ocean-700 font-semibold">2.34</span>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Results Section */}
          <div className="lg:col-span-2 space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-semibold text-ocean-800">Species Detection Results</h2>
              {analysisComplete && (
                <div className="flex space-x-2">
                  <button 
                    onClick={handleDownloadCSV}
                    className="glass-seaweed text-white px-4 py-2 rounded-lg glow-seaweed transition-all duration-200 flex items-center space-x-2"
                  >
                    <Download className="w-4 h-4" />
                    <span>CSV</span>
                  </button>
                  <button 
                    onClick={handleDownloadPDF}
                    className="glass-fishOrange text-white px-4 py-2 rounded-lg glow-fishOrange transition-all duration-200 flex items-center space-x-2"
                  >
                    <FileText className="w-4 h-4" />
                    <span>PDF</span>
                  </button>
                </div>
              )}
            </div>

            {analysisComplete ? (
              <div className="glass rounded-2xl overflow-hidden glow-soft">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="glass-dark">
                      <tr>
                        <th className="px-4 py-3 text-left text-sm font-semibold text-ocean-800">Species</th>
                        <th className="px-4 py-3 text-left text-sm font-semibold text-ocean-800">Common Name</th>
                        <th className="px-4 py-3 text-right text-sm font-semibold text-ocean-800">Reads</th>
                        <th className="px-4 py-3 text-center text-sm font-semibold text-ocean-800">Abundance</th>
                        <th className="px-4 py-3 text-right text-sm font-semibold text-ocean-800">Confidence</th>
                        <th className="px-4 py-3 text-right text-sm font-semibold text-ocean-800">% Total</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-white/20">
                      {sampleResults.map((result, index) => (
                        <tr key={index} className="hover:glass-dark transition-colors duration-200">
                          <td className="px-4 py-3">
                            <span className="font-medium italic text-ocean-800">{result.species}</span>
                          </td>
                          <td className="px-4 py-3 text-gray-700">{result.common}</td>
                          <td className="px-4 py-3 text-right font-mono text-sm">{result.reads.toLocaleString()}</td>
                          <td className="px-4 py-3 text-center">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getAbundanceColor(result.abundance)}`}>
                              {result.abundance}
                            </span>
                          </td>
                          <td className="px-4 py-3 text-right">
                            <div className="flex items-center justify-end space-x-2">
                              <div className="w-16 bg-gray-200 rounded-full h-1.5">
                                <div 
                                  className="bg-gradient-to-r from-ocean-500 to-aqua-500 h-1.5 rounded-full"
                                  style={{ width: `${result.confidence}%` }}
                                ></div>
                              </div>
                              <span className="font-mono text-sm text-ocean-700">{result.confidence}%</span>
                            </div>
                          </td>
                          <td className="px-4 py-3 text-right font-mono text-sm text-ocean-700">
                            {((result.reads / totalReads) * 100).toFixed(1)}%
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Visualization */}
                <div className="p-6 border-t border-white/20">
                  <div className="flex items-center space-x-2 mb-4">
                    <BarChart3 className="w-5 h-5 text-ocean-600" />
                    <h3 className="text-lg font-semibold text-ocean-800">Species Abundance Distribution</h3>
                  </div>
                  <div className="space-y-2">
                    {sampleResults.slice(0, 4).map((result, index) => {
                      const percentage = (result.reads / totalReads) * 100;
                      return (
                        <div key={index} className="flex items-center space-x-3">
                          <div className="w-32 text-sm text-gray-700 truncate">{result.common}</div>
                          <div className="flex-1 bg-gray-200 rounded-full h-3">
                            <div 
                              className="bg-gradient-to-r from-coral-500 to-fishOrange-500 h-3 rounded-full transition-all duration-500"
                              style={{ width: `${percentage}%` }}
                            ></div>
                          </div>
                          <div className="w-12 text-right text-sm font-mono text-ocean-700">
                            {percentage.toFixed(1)}%
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            ) : (
              <div className="glass rounded-2xl p-12 text-center glow-soft">
                <div className="w-16 h-16 bg-gradient-to-br from-ocean-100 to-aqua-200 rounded-full flex items-center justify-center mx-auto mb-4 glow-soft">
                  <Dna className="w-8 h-8 text-ocean-700 animate-pulse-soft" />
                </div>
                <h3 className="text-lg font-medium text-gray-600 mb-2">Ready for eDNA Analysis</h3>
                <p className="text-gray-500">Upload your environmental DNA samples to begin species identification</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default EDNA;